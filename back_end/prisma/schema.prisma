// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement()) @map("userId")
  email     String   @unique @map("email")
  name      String   @map("name")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  emailTokens String? @map("emailTokens")
  likedmuscle String? @map("likedmuscle")
  failedAttempts Int? @map("failedAttempts")
  verifiedstatus User_Status  @map("verifiedstatus")
  profile  Profile?
  post     Posts[]
  comment  Comments[]
  favorite Favorites[]
  following Follows[]   @relation("following")
  follower  Follows[]   @relation("follower")
  @@map("Users")
}

model Profile {
  userProfileId Int      @id @default(autoincrement()) @map("userProfileId")
  userId        Int      @unique @map("userId")
  weight        Int?      @map("weight")
  height        Int?      @map("height")
  birth         Int?      @map("birth")
  address       String?   @map("address")
  nickname      String?   @unique @map("nickname")
  introduction  String?   @map("introduction")
  profileImage  String?   @map("profileImage")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updatedAt")
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@map("Profile")
}
model Posts {
  postId       Int      @id @default(autoincrement())
  userId       Int      @map("userId")
  title        String   @map("title")
  content      String   @map("content")
  url          String?  @map("url")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @updatedAt @map("updateAt")
  fav_cnt      Int @default(0) 
  user     Users      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  comment  Comments[]
  favorite Favorites[]
  contentImages ContentImages[]
  @@map("Posts")
}
model Comments {
  commentId   Int      @id @default(autoincrement()) @map("commentId")
  userId      Int      @map("userId")
  postId      Int      @map("postId")
  content_cmm String   @map("content_cmm") @db.Text
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  clike Int @default(0)
  post Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  favorites Favorites[]
  @@map("Comments")
}

// model Favorites {
//   userId Int @unique @map("userId")
//   postId Int @map("postId")
//   user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
//   post Posts @relation(fields: [postId], references: [postId], onDelete: Cascade)
//   @@map("Favorites")
// }

model Favorites {
    favoriteId Int @id @default(autoincrement()) @map("favoriteId")
    userId    Int      
    postId    Int?      
    commentId Int? 
    createdAt DateTime @default(now()) @map("createdAt")
    updatedAt DateTime @updatedAt @map("updatedAt")
    user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
    post Posts? @relation(fields: [postId], references: [postId], onDelete: Cascade)
    comment Comments? @relation(fields: [commentId], references: [commentId], onDelete: Cascade)
    @@map("Favorites")
}

model Follows {
  followingId Int   @map("followingId")            // (내가) 팔로잉 하는 사람
  followerId  Int   @map("followerId")            //(나를) 팔로잉 하는 사람
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  followingCount Int      @default(0) @map("followingCount")
  followerCount  Int      @default(0) @map("followerCount")
  following   Users @relation("following", fields: [followingId], references: [userId])
  follower    Users @relation("follower", fields: [followerId], references: [userId])
  @@id([followingId, followerId])
  @@map("Follows")
}

model ContentImages {
  imageId  Int    @id @default(autoincrement())
  postId   Int
  imageUrl String
  post     Posts  @relation(fields: [postId], references: [postId])
}


enum User_Status {
  pass
  nonpass
}


